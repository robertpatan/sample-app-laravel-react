{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","api/graph-queries.js","api/api.js","components/Layout/Layout.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","id","to","Footer","queries","layout","query","home","about","Api","graphQuery","axios","url","this","method","data","getData","assetUrl","Layout","children","Component","Home","state","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAoBeA,G,MAjBA,SAACC,GACd,OACE,yBAAKC,UAAU,gEAAgEC,GAAG,WAChF,yBAAKD,UAAU,aACb,kBAAC,IAAD,CAAME,GAAG,IAAIF,UAAU,kCAAvB,aACA,yBAAKA,UAAU,2BAA2BC,GAAG,oBAC3C,wBAAID,UAAU,sBACZ,wBAAIA,UAAU,yBACZ,kBAAC,IAAD,CAAME,GAAG,IAAIF,UAAU,wDAAvB,iBCCCG,EAVA,SAACJ,GAGd,OACE,6BAASC,UAAU,yCACjB,yBAAKA,UAAU,aAAY,sE,QCmIlBI,EA1IC,CACdC,OAAQ,CACNC,MAAM,83BAqDRC,KAAM,CACJD,MAAM,4jCAmDRE,MAAO,CACLF,MAAM,4iBCzGJG,E,qGAIWC,GACb,OAAOC,EAAM,CACXC,IAAKC,KAAKD,IACVE,OAAQ,OACRC,KAAM,CACJT,MAAOI,O,sCAOX,OAAOG,KAAKG,QAAQZ,EAAQC,OAAOC,S,oCAInC,OAAOO,KAAKG,QAAQZ,EAAQG,KAAKD,S,4BAQtBM,GACX,OAAOC,KAAKI,SAAWL,M,KA7BrBH,EACGG,IAAM,gCADTH,EAEGQ,SAAW,wB,scC8BLC,E,6JAfX,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,0BAAMlB,UAAU,QACba,KAAKd,MAAMoB,UAGd,kBAAC,EAAD,W,GArBaC,a,scCcNC,E,kMAdbC,MAAQ,G,oGAKN,OACE,kBAAC,EAAD,KACE,yD,GARWF,a,scCeJG,E,6JAVX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWJ,EAAMK,OAAK,U,GAL9BN,aCIEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b2713ae.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst Header = (props) => {\n  return (\n    <nav className=\"navbar navbar-expand-lg bg-secondary text-uppercase fixed-top\" id=\"mainNav\">\n      <div className=\"container\">\n        <Link to=\"/\" className=\"navbar-brand js-scroll-trigger\">MG MOVIES</Link>\n        <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n          <ul className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item mx-0 mx-lg-1\">\n              <Link to=\"/\" className=\"nav-link py-3 px-0 px-lg-3 rounded js-scroll-trigger\">MOVIES</Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = (props) => {\n\n\n  return (\n    <section className=\"copyright py-4 text-center text-white\">\n      <div className=\"container\"><small>Copyright Â© Your Website 2020</small></div>\n    </section>\n  );\n};\n\nexport default Footer;\n","const queries = {\n  layout: {\n    query: `\n      query {\n        menus(\n          where: {isMain: true }\n        ) {\n          title\n          link\n          isMain\n          nodes {\n            title\n            link\n          }\n        }\n        socialIcon {\n          icon {\n            label\n            className\n            link\n          }\n        }\n        footer {\n          logoColumn {\n            logo {\n              alt\n              image {\n                url\n              }\n            }\n            text\n          }\n          basicColumns {\n            header\n            Link {\n              label\n              iconClass\n              link\n            }\n          }\n        }\n        socialIcon {\n          icon {\n            label\n            className\n            link\n          }\n        }\n        newsletterForm {\n          formAction\n        }\n      }\n    `,\n  },\n\n  home: {\n    query: `\n      query {\n        pages (\n          limit: 1\n          where:{title_contains: \"Home\"}\n        ) {\n          title\n          dz {\n            __typename\n            ... on ComponentHomeHero {\n              header\n              smallHeader\n              description\n              mainImage {\n                name\n                url\n              }\n              backgroundImage {\n                name\n                url\n              }\n              Button {\n                value\n                link\n                reactComponentName\n              }\n              \n            }\n            __typename\n            ... on ComponentHomeWhy {\n              smallHeader\n              header\n              description\n              cards {\n                icon {\n                  name\n                  url\n                }\n                cover {\n                  name\n                  url\n                }\n                header\n                description\n              }\n            }\n          }\n        }\n      }\n    `,\n  },\n  about: {\n    query: `\n      query {\n        pages(limit: 1, where: { title_contains: \"About Us\" }) {\n          title\n          content\n          dz {\n            __typename\n            ... on ComponentAboutStepsSection {\n              header {\n                title\n                smallTitle\n                description\n              }\n              steps {\n                stepName\n                header\n                number\n                description\n                direction\n              }\n            }\n          }\n        }\n      }\n    `,\n  },\n\n}\n\n\nexport default queries;\n","import * as axios from \"axios\"\nimport queries from './graph-queries'\n\nclass Api {\n  static url = 'http://127.0.0.1:1337/graphql';\n  static assetUrl = 'http://localhost:1337';\n\n  static getData(graphQuery) {\n    return axios({\n      url: this.url,\n      method: 'post',\n      data: {\n        query: graphQuery,\n      },\n    });\n\n  }\n\n  static getLayoutData() {\n    return this.getData(queries.layout.query)\n  }\n\n  static getHomeData() {\n    return this.getData(queries.home.query)\n  }\n\n  /**\n   *\n   * @param url\n   * @returns {string}\n   */\n  static asset(url) {\n    return this.assetUrl + url;\n  }\n}\n\nexport default Api;\n","import React, { Component, Fragment } from 'react'\nimport Header from \"../Header/Header\"\nimport Footer from \"../Footer/Footer\"\nimport Api from '../../api/api'\n\n\nclass Layout extends Component {\n  // state = {\n  //   isHomePath: window.location.pathname === '/',\n  // }\n  //\n  // componentDidMount = async () => {\n  //   const response = await Api.getLayoutData();\n  //   this.setState({...this.state, ...response.data.data})\n  // }\n\n\n  render() {\n\n\n    return (\n      <Fragment>\n        <Header/>\n        <main className=\"main\">\n          {this.props.children}\n        </main>\n\n        <Footer/>\n      </Fragment>\n\n    )\n\n  }\n}\n\nexport default Layout;\n","import React, { Component } from 'react'\nimport Layout from \"../components/Layout/Layout\"\nimport Header from \"../components/Header/Header\";\n\n\nclass Home extends Component {\n  state = {}\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <Layout>\n        <div> asdasdasdasasdasd </div>\n      </Layout>\n    )\n\n  }\n}\n\nexport default Home;","import React, {Component} from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Home from \"./pages/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={Home} exact/>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}